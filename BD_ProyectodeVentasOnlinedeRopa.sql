--- DISEÑO E IMPLEMENTACIÓN DE UNA BASE DE DATOS EN ORACLE PARA EL PROCESO DE VENTAS ONLINE DE ROPA ---

-- Creación del tablespace
create tablespace ts_ventas_ropa
   datafile 'ts_ventas_ropa.dbf' size 50M
   autoextend on next 10M maxsize unlimited;


-- Creación del usuario y asignación de permisos
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE; -- Habilita la ejecución de comandos internos en Oracle
CREATE USER admin_v IDENTIFIED BY  123 -- "123"
DEFAULT TABLESPACE ts_ventas_ropa; -- USERS

ALTER USER admin_v QUOTA UNLIMITED ON ts_ventas_ropa;  -- Permite usar el espacio del tablespace
GRANT CREATE SESSION TO admin_v; -- Dar Permiso para Iniciar Sesión
GRANT "RESOURCE" TO admin_v; -- Dar Permisos de Creación de Objetos
ALTER USER admin_v DEFAULT ROLE "RESOURCE"; -- Establecer el Rol por Defecto - Asigna un rol predefinido

--Otorga los permisos correctos a admin_v 
GRANT CREATE JOB TO admin_v; -- permiso job
GRANT MANAGE SCHEDULER TO admin_v;
GRANT CREATE EXTERNAL JOB TO admin_v; --permisos para backup

-- Dar acceso completo a la gestión
GRANT DBA TO admin_v; 
-- Verificar si el tablespace existe
SELECT tablespace_name FROM dba_tablespaces WHERE tablespace_name = 'TS_VENTAS_ROPA'; 
-- Verificar si el usuario fue creado y cual es su tablespace
SELECT username, default_tablespace FROM dba_users WHERE username = 'ADMIN_V';


-- Creación de nuevos usuarios y asignación de permisos
CREATE USER vendedor IDENTIFIED BY vend123
DEFAULT TABLESPACE ts_ventas_ropa;

CREATE USER consultor IDENTIFIED BY cons123
DEFAULT TABLESPACE ts_ventas_ropa;

-- Asignación de permisos
ALTER USER vendedor QUOTA UNLIMITED ON ts_ventas_ropa;
ALTER USER consultor QUOTA UNLIMITED ON ts_ventas_ropa;

GRANT CREATE SESSION TO vendedor;
GRANT CREATE SESSION TO consultor;

-- Permisos para vendedor tester
GRANT SELECT, INSERT, UPDATE, DELETE ON categorias TO vendedor;
GRANT SELECT, INSERT, UPDATE, DELETE ON productos TO vendedor;
GRANT SELECT, INSERT, UPDATE, DELETE ON clientes TO vendedor;
GRANT SELECT, INSERT, UPDATE, DELETE ON pedidos TO vendedor;
GRANT SELECT, INSERT, UPDATE, DELETE ON detalle_pedido TO vendedor;
GRANT SELECT, INSERT, UPDATE, DELETE ON metodos_pago TO vendedor;
GRANT SELECT, INSERT, UPDATE, DELETE ON pagos TO vendedor;

-- Permisos para consultor 
GRANT SELECT ON categorias TO consultor;
GRANT SELECT ON productos TO consultor;
GRANT SELECT ON clientes TO consultor;
GRANT SELECT ON pedidos TO consultor;
GRANT SELECT ON detalle_pedido TO consultor;
GRANT SELECT ON metodos_pago TO consultor;
GRANT SELECT ON pagos TO consultor;

-- Tabla de Categorías
create table categorias (
   id_categoria number
      generated by default on null as identity
   primary key,
   nombre       varchar2(50) not null,
   fecha_creacion date default sysdate,
   fecha_actualizacion date
);

-- Tabla de Marcas
create table marcas (
    id_marca number generated by default on null as identity primary key,
    nombre varchar2(50) not null,
    descripcion varchar2(200),
    fecha_creacion date default sysdate,
    fecha_actualizacion date
);

-- Tabla de Productos
create table productos (
   id_producto  number
      generated by default on null as identity
   primary key,
   nombre       varchar2(100) not null,
   descripcion  varchar2(500),
   precio       number(10,2) not null,
   stock        number not null,
   url_img      varchar2(500),
   id_categoria number not null,
   fecha_creacion date default sysdate,
   fecha_actualizacion date,
   id_marca number,
   constraint fk_producto_categoria foreign key ( id_categoria )
      references categorias ( id_categoria ),
   constraint fk_producto_marca foreign key (id_marca) references marcas(id_marca)
)/



-- Tabla de Tallas
create table tallas (
    id_talla number generated by default on null as identity primary key,
    nombre varchar2(10) not null,
    fecha_creacion date default sysdate,
    fecha_actualizacion date
);

-- Tabla de Colores
create table colores (
    id_color number generated by default on null as identity primary key,
    nombre varchar2(30) not null,
    codigo_hex varchar2(7),
    fecha_creacion date default sysdate,
    fecha_actualizacion date
);

-- Tabla de Inventario
create table inventario (
    id_inventario number generated by default on null as identity primary key,
    id_producto number not null,
    id_talla number not null,
    id_color number not null,
    stock number not null,
    fecha_creacion date default sysdate,
    fecha_actualizacion date,
    constraint fk_inventario_producto foreign key (id_producto) references productos(id_producto),
    constraint fk_inventario_talla foreign key (id_talla) references tallas(id_talla),
    constraint fk_inventario_color foreign key (id_color) references colores(id_color)
);

-- Tabla de Clientes
create table clientes (
   id_cliente number
      generated by default on null as identity
   primary key,
   nombre     varchar2(100) not null,
   email      varchar2(100) not null unique,
   direccion  varchar2(200),
   telefono   varchar2(20),
   fecha_creacion date default sysdate,
   fecha_actualizacion date
);

-- Tabla de Direcciones
create table direcciones (
    id_direccion number generated by default on null as identity primary key,
    id_cliente number not null,
    calle varchar2(100) not null,
    numero varchar2(20),
    distrito varchar2(50),
    ciudad varchar2(50) not null,
    codigo_postal varchar2(10),
    referencia varchar2(200),
    es_principal number(1) default 0,
    fecha_creacion date default sysdate,
    fecha_actualizacion date,
    constraint fk_direccion_cliente foreign key (id_cliente) references clientes(id_cliente)
);

-- Tabla de Pedidos
create table pedidos (
   id_pedido    number
      generated by default on null as identity
   primary key,
   id_cliente   number not null,
   fecha_pedido date default sysdate,
   estado       varchar2(20) not null,
   fecha_creacion date default sysdate,
   fecha_actualizacion date,
   constraint fk_pedido_cliente foreign key ( id_cliente )
      references clientes ( id_cliente )
);

-- Tabla de Detalle de Pedido
create table detalle_pedido (
   id_detalle      number
      generated by default on null as identity
   primary key,
   id_pedido       number not null,
   id_inventario   number not null,
   cantidad        number not null,
   precio_unitario number(10,2) not null,
   fecha_creacion date default sysdate,
   fecha_actualizacion date,
   constraint fk_detalle_pedido foreign key (id_pedido)
      references pedidos (id_pedido),
   constraint fk_detalle_inventario foreign key (id_inventario)
      references inventario (id_inventario)
);

-- Tabla de Métodos de Pago
create table metodos_pago (
   id_metodo number
      generated by default on null as identity
   primary key,
   nombre    varchar2(50) not null,
   fecha_creacion date default sysdate,
   fecha_actualizacion date
);

-- Tabla de Pagos
create table pagos (
   id_pago    number
      generated by default on null as identity
   primary key,
   id_pedido  number not null,
   id_metodo  number not null,
   monto      number(10,2) not null,
   fecha_pago date default sysdate,
   fecha_creacion date default sysdate,
   fecha_actualizacion date,
   constraint fk_pago_pedido foreign key ( id_pedido )
      references pedidos ( id_pedido ),
   constraint fk_pago_metodo foreign key ( id_metodo )
      references metodos_pago ( id_metodo )
);

-- Tabla de Usuarios
create table usuarios (
   id_usuario number
      generated by default on null as identity
   primary key,
   nombre_usuario varchar2(50) not null unique,
   contrasena     varchar2(100) not null,
   rol            varchar2(20) not null,
   fecha_creacion date default sysdate,
   fecha_actualizacion date
);

-- Tabla de Envíos
create table envios (
   id_envio    number
      generated by default on null as identity
   primary key,
   id_pedido   number not null,
   direccion   varchar2(200) not null,
   fecha_envio date,
   estado      varchar2(20) not null,
   fecha_creacion date default sysdate,
   fecha_actualizacion date,
   constraint fk_envio_pedido foreign key ( id_pedido )
      references pedidos ( id_pedido )
);

-- Tabla de Carrito de Compras
create table carrito (
    id_carrito number generated by default on null as identity primary key,
    id_cliente number not null,
    id_inventario number not null,
    cantidad number not null,
    fecha_creacion date default sysdate,
    fecha_actualizacion date,
    constraint fk_carrito_cliente foreign key (id_cliente) references clientes(id_cliente),
    constraint fk_carrito_inventario foreign key (id_inventario) references inventario(id_inventario)
);

-- Tabla de Parámetros
create table parametros (
   id_parametro number primary key,
   descripcion  varchar2(200),
   codigo       varchar2(50) not null unique
);

-- Tabla de Detalle de Parámetros
create table detalle_parametros (
   id_dparametro number primary key,
   descripcion   varchar2(200),
   codigo        varchar2(50) not null unique,
   id_parametro  number,
   constraint fk_id_parametro foreign key ( id_parametro )
      references parametros ( id_parametro )
);


-- Inserción de datos iniciales en la tabla de categorías
INSERT INTO categorias (nombre) VALUES ('Ropa de Hombre');
INSERT INTO categorias (nombre) VALUES ('Ropa de Mujer');
INSERT INTO categorias (nombre) VALUES ('Ropa de Niños');
INSERT INTO categorias (nombre) VALUES ('Accesorios');
-- Confirmar cambios
COMMIT;

-- Inserción de datos iniciales en la tabla de métodos de pago
INSERT INTO metodos_pago (nombre) VALUES ('Tarjeta de Crédito');
INSERT INTO metodos_pago (nombre) VALUES ('Tarjeta de Débito');
INSERT INTO metodos_pago (nombre) VALUES ('PayPal');
INSERT INTO metodos_pago (nombre) VALUES ('Transferencia Bancaria');
-- Confirmar cambios
COMMIT;

-- Inserción de datos iniciales en la tabla de productos
INSERT INTO productos (nombre, descripcion, precio, stock, id_categoria) VALUES ('Camisa de Hombre', 'Camisa de algodón de alta calidad', 29.99, 100, 1);
INSERT INTO productos (nombre, descripcion, precio, stock, id_categoria) VALUES ('Vestido de Mujer', 'Vestido elegante para ocasiones especiales', 49.99, 50, 2);
INSERT INTO productos (nombre, descripcion, precio, stock, id_categoria) VALUES ('Pantalones de Niños', 'Pantalones cómodos para niños', 19.99, 75, 3);
INSERT INTO productos (nombre, descripcion, precio, stock, id_categoria) VALUES ('Gorra', 'Gorra de verano', 15.99, 200, 4);
-- Confirmar cambios
COMMIT;



-- =============================
-- FASE 5: USO DE PAQUETES E ÍNDICES
-- =============================

-- 1. Creación del paquete para inserción de registros en entidades clave
CREATE OR REPLACE PACKAGE pkg_proceso_ventas AS
    -- Procedimientos para insertar registros en las tablas principales
    PROCEDURE insertar_categoria(p_nombre VARCHAR2);
    PROCEDURE insertar_producto(
        p_nombre VARCHAR2, 
        p_descripcion VARCHAR2, 
        p_precio NUMBER, 
        p_stock NUMBER, 
        p_id_categoria NUMBER, 
        p_id_marca NUMBER,
        p_url_img VARCHAR2
    );
    PROCEDURE insertar_cliente(p_nombre VARCHAR2, p_email VARCHAR2, p_direccion VARCHAR2, p_telefono VARCHAR2);
    PROCEDURE insertar_pedido(p_id_cliente NUMBER, p_estado VARCHAR2);
    PROCEDURE insertar_detalle_pedido(p_id_pedido NUMBER, p_id_inventario NUMBER, p_cantidad NUMBER, p_precio_unitario NUMBER);
END pkg_proceso_ventas;
/

-- Implementación del paquete
CREATE OR REPLACE PACKAGE BODY pkg_proceso_ventas AS
    PROCEDURE insertar_categoria(p_nombre VARCHAR2) AS
    BEGIN
        INSERT INTO categorias (nombre) VALUES (p_nombre);
        COMMIT;
    END insertar_categoria;

    PROCEDURE insertar_producto(
        p_nombre VARCHAR2, 
        p_descripcion VARCHAR2, 
        p_precio NUMBER, 
        p_stock NUMBER, 
        p_id_categoria NUMBER, 
        p_id_marca NUMBER,
        p_url_img VARCHAR2
    ) AS
    BEGIN
        INSERT INTO productos (nombre, descripcion, precio, stock, id_categoria, id_marca, url_img) 
        VALUES (p_nombre, p_descripcion, p_precio, p_stock, p_id_categoria, p_id_marca, p_url_img);
        COMMIT;
    END insertar_producto;

    PROCEDURE insertar_cliente(p_nombre VARCHAR2, p_email VARCHAR2, p_direccion VARCHAR2, p_telefono VARCHAR2) AS
    BEGIN
        INSERT INTO clientes (nombre, email, direccion, telefono) 
        VALUES (p_nombre, p_email, p_direccion, p_telefono);
        COMMIT;
    END insertar_cliente;

    PROCEDURE insertar_pedido(p_id_cliente NUMBER, p_estado VARCHAR2) AS
    BEGIN
        INSERT INTO pedidos (id_cliente, estado) 
        VALUES (p_id_cliente, p_estado);
        COMMIT;
    END insertar_pedido;

    PROCEDURE insertar_detalle_pedido(p_id_pedido NUMBER, p_id_inventario NUMBER, p_cantidad NUMBER, p_precio_unitario NUMBER) AS
    BEGIN
        INSERT INTO detalle_pedido (id_pedido, id_inventario, cantidad, precio_unitario) 
        VALUES (p_id_pedido, p_id_inventario, p_cantidad, p_precio_unitario);
        COMMIT;
    END insertar_detalle_pedido;
END pkg_proceso_ventas;
/

-- =============================
-- CREACIÓN DE ÍNDICES EN ENTIDADES CORE DEL NEGOCIO
-- =============================

-- Índice para mejorar la búsqueda de productos por categoría
CREATE INDEX idx_productos_categoria ON productos (id_categoria);

-- Índice para mejorar la búsqueda de pedidos por cliente
CREATE INDEX idx_pedidos_cliente ON pedidos (id_cliente);

-- Índice para mejorar la búsqueda de detalles de pedidos por pedido
CREATE INDEX idx_detalle_pedido ON detalle_pedido (id_pedido);

-- =============================
-- FASE 6: USO DE CRON JOBS
-- =============================

-- Job 1: Verificar cada hora si hay pedidos sin facturar y enviar un recordatorio
BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        job_name        => 'JOB_VERIFICAR_FACTURACION',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN
                                UPDATE pedidos SET estado = ''Pendiente de Facturación''
                                WHERE estado = ''Pendiente'';
                                COMMIT;
                            END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=HOURLY; INTERVAL=1',
        enabled         => TRUE
    );
END;
/

-- Job 2: Generar un reporte diario de ventas al final del día
BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        job_name        => 'JOB_REPORTE_VENTAS',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN
                                INSERT INTO reportes_ventas (fecha_reporte, total_ventas)
                                SELECT SYSDATE, SUM(pagos.monto) FROM pagos;
                                COMMIT;
                            END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=DAILY; BYHOUR=23; BYMINUTE=59',
        enabled         => TRUE
    );
END;
/

-- Job 3: Revisar cada 30 minutos si hay productos con stock bajo y enviar una alerta
BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        job_name        => 'JOB_CONTROL_STOCK',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN
                                UPDATE inventario SET stock = 10 WHERE stock < 5;
                                COMMIT;
                            END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=MINUTELY; INTERVAL=30',
        enabled         => TRUE
    );
END;
/

-- Job 4: Registrar automáticamente el stock de cada producto al final del día
BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        job_name        => 'JOB_REGISTRO_STOCK_DIARIO',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN
                                INSERT INTO historial_stock (fecha, id_producto, stock)
                                SELECT SYSDATE, id_producto, stock FROM inventario;
                                COMMIT;
                            END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=DAILY; BYHOUR=23; BYMINUTE=59',
        enabled         => TRUE
    );
END;
/

-- Job 5: Copia de seguridad de los esquemas

BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        job_name        => 'JOB_BACKUP_ESQUEMAS',
        job_type        => 'EXECUTABLE',
        job_action      => '/usr/bin/expdp admin_v/123 FULL=YES DIRECTORY=BACKUP_DIR DUMPFILE=backup_%U.dmp LOGFILE=backup.log',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=DAILY; BYHOUR=02',  -- Se ejecuta diariamente a las 2 AM
        enabled         => TRUE
    );
END;
/

-- =============================
-- VERIFICACIÓN DE JOBS
-- =============================
-- Consultar el estado de los jobs programados
SELECT job_name, state, last_start_date, next_run_date FROM USER_SCHEDULER_JOBS;
